#!/bin/sh

dk="docker"

dkc="docker-compose"
dkcU="$dkc up -d --remove-orphans"
dkcd="$dkc down"
dkce="$dkc exec web"

createProxy() {
    $dk rm -f nginx-proxy > /dev/null 2>&1
    $dk network create proxy 2>/dev/null
    $dk run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro --name=nginx-proxy --restart=always --network=proxy jwilder/nginx-proxy > /dev/null
    echo 'üîÄ  The Nginx proxy was not launched. I did it for you, and it will stay up until you stop it manually.'
}


createProxyIfNotRunning() {
    isProxyRunning="$($dk inspect -f '{{.State.Running}}' nginx-proxy 2>&1)"
    if [[ ${isProxyRunning} != 'true' ]]; then
        createProxy
    fi
}

up() {
    createProxyIfNotRunning
    $dkcU $@
}

open() {
    domain='.localhost'
    virtualHosts="$($dkce sh -c 'echo $VIRTUAL_HOST' | tr -d '\r')"
    url="$(python - << EOF
print '$virtualHosts'.split('$domain')[0].split(',')[-1].strip()+'$domain'
EOF
)"
    python -m webbrowser "http://$url/$1"
}

down() {
    $dkcd $@
}

artisan() {
    $dkce php artisan $@
}

console() {
    $dkce php ./bin/console $@
}

composer() {
    $dkce composer $@
}

node() {
    $dk run -it --rm -v $PWD:/usr/src/app -w /usr/src/app node $@
}

yarn() {
    node yarn $@
}

getPath() {
    SOURCE="${BASH_SOURCE[0]}"
    while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done

    echo "$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
}

getSrcPath() {
    echo "$(getPath)/../src"
}

writeDockerComposeFile() {
    sed -e "s/\${PROJECT_NAME}/$1/g" < $(getSrcPath)/docker-compose.yml.tpl > ${PWD}/docker-compose.yml
    echo "üì¶  New docker-compose.yml written for $1 project."
}

copyDockerFolder() {
    cp -r $(getSrcPath)/docker ${PWD}
    echo "üê≥  Docker folder copied!"
}

init() {
    if [[ $# -gt 0 ]]; then
        projectName=$1
    else
        projectName=${PWD##*/}
    fi

    writeDockerComposeFile $projectName
    copyDockerFolder

    echo "üéâ  You're ready to go. Launch '$0 up' to start the project."
}

ports() {
    template=$(cat << 'EOF'
{{$service := (index .Config.Labels "com.docker.compose.service")}}
{{range $p, $conf := .NetworkSettings.Ports}}
    {{if $conf}}
        \n\r - {{$service}}:{{$p}} -> localhost:{{(index $conf 0).HostPort}}
    {{end}}
{{end}}
EOF
)
    result="$($dk inspect -f "$template" $($dkc ps -q))"

    if [[ $# -gt 0 ]]; then
        echo
        echo $result | grep $1
    else
        echo $result
    fi
    echo
}

dbInfos() {
    # TODO
    $dk inspect -f $($dkc ps -q db)
}

usage() {
    cat <<EOF
PHP Project Launcher.

Usage:
  $0 [COMMAND] [ARGS...]
  $0 -h | --help

Commands:
  init               Install the docker files to set the services. Can be used with project name in parameter.
  up | u             Run the project services (run the proxy if not already launched).
  down | d           Stop and remove the project services.
  reload | rl        Down and up the project services.
  ports | p          List private -> public binding ports. Can be used with service name in parameter.
  open | o           Open project in web browser.
  artisan | a        Execute Laravel Artisan in web service (with access to DB).
  console | sf       Execute Symfony Console in web service (with access to DB).
  composer | c       Execute Composer in web service (with proper version of php).
  yarn | y           Execute Yarn in project (with Node v10, linux environment).
  bash | sh          Open a bash console in web service.
  logs               View output from services.
  ps                 List services.
  *                  Fallback on docker-compose binary.
EOF
exit 1
}



if [[ $# -gt 0 ]]; then
    firstArg=$1
    shift 1

    case ${firstArg} in
        up | u)
            up $@
            ;;

        down | d)
            down $@
            ;;

        reload | rl)
            down
            up --build $@
            ;;

        artisan | a)
            artisan $@
            ;;

        console | sf)
            console $@
            ;;

        composer | c)
            composer $@
            ;;

        yarn | y)
            yarn $@
            ;;

        bash | sh)
            $dkce bash $@
            ;;

        init)
            init $1
            ;;

        open | o)
            open $1
            ;;

        ports | p)
            ports $1
            ;;

        db)
           dbInfos
            ;;

        --help | -h)
            usage
            ;;
        *)
            echo "üê≥ Fallback to \"docker-compose $firstArg $@\": "
            $dkc ${firstArg} $@
            ;;
    esac
else
    usage
fi
